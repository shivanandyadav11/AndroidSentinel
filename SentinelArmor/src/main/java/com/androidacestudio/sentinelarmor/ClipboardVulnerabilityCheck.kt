package com.androidacestudio.sentinelarmor

import android.content.ClipboardManager
import android.content.Context
import dalvik.system.DexFile
import java.io.File

/**
 * A security check that examines the usage of clipboard in Android applications
 * and identifies potential vulnerabilities associated with it.
 *
 * This check analyzes various aspects of clipboard usage:
 * - Detection of clipboard read and write operations
 * - Identification of potential sensitive data being copied to the clipboard
 * - Analysis of clipboard data persistence
 * - Examination of clipboard access in background services
 * - Detection of potential data leaks through the clipboard
 *
 * The check aims to identify potential vulnerabilities related to improper
 * clipboard usage and insufficient protection of sensitive data.
 *
 * @property context The Android application context, used to access app information and resources.
 *
 * @see SecurityCheck
 * @see ClipboardManager
 */
internal class ClipboardVulnerabilityCheck(
    private val context: Context,
) : SecurityCheck {
    /**
     * Performs the clipboard vulnerability check.
     *
     * This method evaluates various aspects of clipboard usage in the application,
     * returning a list of [SecurityIssue]s if any potential vulnerabilities or misconfigurations are found.
     * The check includes:
     *
     * 1. Analyzing clipboard read and write operations
     * 2. Identifying potential sensitive data being copied to the clipboard
     * 3. Examining clipboard data persistence
     * 4. Checking clipboard access in background services
     * 5. Detecting potential data leaks through the clipboard
     *
     * @return A list of [SecurityIssue]s. If the list is empty, no security issues were detected.
     */
    override fun check(): List<SecurityIssue> {
        val issues = mutableListOf<SecurityIssue>()

        issues.addAll(checkClipboardOperations())
        issues.addAll(checkSensitiveDataCopying())
        issues.addAll(checkClipboardPersistence())
        issues.addAll(checkBackgroundClipboardAccess())
        issues.addAll(checkClipboardDataLeaks())
        return issues
    }

    /**
     * Analyzes clipboard read and write operations.
     *
     * @return A list of [SecurityIssue]s related to clipboard operations.
     */
    private fun checkClipboardOperations(): List<SecurityIssue> {
        val issues = mutableListOf<SecurityIssue>()
        val packageName = context.packageName
        val apkFile = File(context.packageCodePath)

        try {
            DexFile(apkFile).entries().toList().forEach { className ->
                if (className.startsWith(packageName)) {
                    val clazz = Class.forName(className)
                    clazz.declaredMethods.forEach { method ->
                        val body = method.toGenericString()
                        if (body.contains("ClipboardManager") || body.contains("getSystemService(Context.CLIPBOARD_SERVICE)")) {
                            if (body.contains("getPrimaryClip()") || body.contains("setText(")) {
                                issues.add(
                                    SecurityIssue(
                                        severity = Severity.MEDIUM,
                                        description = "Clipboard operation detected in ${clazz.simpleName}.${method.name}",
                                        recommendation = "Ensure clipboard operations are necessary and handle clipboard data securely.",
                                    ),
                                )
                            }
                        }
                    }
                }
            }
        } catch (e: Exception) {
            issues.add(
                SecurityIssue(
                    severity = Severity.LOW,
                    description = "Unable to analyze clipboard operations: ${e.message}",
                    recommendation = "Manually review clipboard usage in the code.",
                ),
            )
        }
        return issues
    }

    /**
     * Identifies potential sensitive data being copied to the clipboard.
     *
     * @return A list of [SecurityIssue]s related to sensitive data copying.
     */
    private fun checkSensitiveDataCopying(): List<SecurityIssue> {
        val issues = mutableListOf<SecurityIssue>()
        val packageName = context.packageName
        val apkFile = File(context.packageCodePath)

        try {
            DexFile(apkFile).entries().toList().forEach { className ->
                if (className.startsWith(packageName)) {
                    val clazz = Class.forName(className)
                    clazz.declaredMethods.forEach { method ->
                        val body = method.toGenericString()
                        if (body.contains("ClipboardManager") || body.contains("getSystemService(Context.CLIPBOARD_SERVICE)")) {
                            if (body.contains("setText(") &&
                                (
                                    body.contains("password") ||
                                        body.contains(
                                            "token",
                                        ) ||
                                        body.contains("secret")
                                )
                            ) {
                                issues.add(
                                    SecurityIssue(
                                        severity = Severity.HIGH,
                                        description = "Potential sensitive data copying to clipboard in ${clazz.simpleName}.${method.name}",
                                        recommendation = "Avoid copying sensitive data like passwords or tokens to the clipboard. If necessary, implement secure clipboard handling.",
                                    ),
                                )
                            }
                        }
                    }
                }
            }
        } catch (e: Exception) {
            issues.add(
                SecurityIssue(
                    severity = Severity.LOW,
                    description = "Unable to analyze sensitive data copying: ${e.message}",
                    recommendation = "Manually review code for instances of copying sensitive data to the clipboard.",
                ),
            )
        }
        return issues
    }

    /**
     * Examines clipboard data persistence.
     *
     * @return A list of [SecurityIssue]s related to clipboard data persistence.
     */
    private fun checkClipboardPersistence(): List<SecurityIssue> {
        val issues = mutableListOf<SecurityIssue>()
        val packageName = context.packageName
        val apkFile = File(context.packageCodePath)

        try {
            var clipboardPersistenceFound = false
            DexFile(apkFile).entries().toList().forEach { className ->
                if (className.startsWith(packageName)) {
                    val clazz = Class.forName(className)
                    clazz.declaredMethods.forEach { method ->
                        val body = method.toGenericString()
                        if (body.contains("ClipboardManager") && body.contains("SharedPreferences")) {
                            clipboardPersistenceFound = true
                            issues.add(
                                SecurityIssue(
                                    severity = Severity.MEDIUM,
                                    description = "Potential clipboard data persistence detected in ${clazz.simpleName}.${method.name}",
                                    recommendation = "Avoid persisting clipboard data. If necessary, implement secure storage and proper data lifecycle management.",
                                ),
                            )
                        }
                    }
                }
            }

            if (!clipboardPersistenceFound) {
                issues.add(
                    SecurityIssue(
                        severity = Severity.LOW,
                        description = "No explicit clipboard data persistence detected",
                        recommendation = "Ensure that clipboard data is not persisted unnecessarily in other parts of the application.",
                    ),
                )
            }
        } catch (e: Exception) {
            issues.add(
                SecurityIssue(
                    severity = Severity.LOW,
                    description = "Unable to analyze clipboard data persistence: ${e.message}",
                    recommendation = "Manually review code for instances of persisting clipboard data.",
                ),
            )
        }
        return issues
    }

    /**
     * Checks clipboard access in background services.
     *
     * @return A list of [SecurityIssue]s related to background clipboard access.
     */
    private fun checkBackgroundClipboardAccess(): List<SecurityIssue> {
        val issues = mutableListOf<SecurityIssue>()
        val packageName = context.packageName
        val apkFile = File(context.packageCodePath)

        try {
            DexFile(apkFile).entries().toList().forEach { className ->
                if (className.startsWith(packageName)) {
                    val clazz = Class.forName(className)
                    if (android.app.Service::class.java.isAssignableFrom(clazz)) {
                        clazz.declaredMethods.forEach { method ->
                            val body = method.toGenericString()
                            if (body.contains("ClipboardManager") || body.contains("getSystemService(Context.CLIPBOARD_SERVICE)")) {
                                issues.add(
                                    SecurityIssue(
                                        severity = Severity.HIGH,
                                        description = "Clipboard access detected in background service: ${clazz.simpleName}.${method.name}",
                                        recommendation = "Avoid accessing clipboard in background services as it may lead to unexpected data exposure.",
                                    ),
                                )
                            }
                        }
                    }
                }
            }
        } catch (e: Exception) {
            issues.add(
                SecurityIssue(
                    severity = Severity.LOW,
                    description = "Unable to analyze background clipboard access: ${e.message}",
                    recommendation = "Manually review background services for clipboard access.",
                ),
            )
        }
        return issues
    }

    /**
     * Detects potential data leaks through the clipboard.
     *
     * @return A list of [SecurityIssue]s related to potential clipboard data leaks.
     */
    private fun checkClipboardDataLeaks(): List<SecurityIssue> {
        val issues = mutableListOf<SecurityIssue>()
        val packageName = context.packageName
        val apkFile = File(context.packageCodePath)

        try {
            DexFile(apkFile).entries().toList().forEach { className ->
                if (className.startsWith(packageName)) {
                    val clazz = Class.forName(className)
                    clazz.declaredMethods.forEach { method ->
                        val body = method.toGenericString()
                        if (body.contains("ClipboardManager") &&
                            (
                                body.contains("Intent(") ||
                                    body.contains(
                                        "startActivity(",
                                    )
                            )
                        ) {
                            issues.add(
                                SecurityIssue(
                                    severity = Severity.HIGH,
                                    description = "Potential clipboard data leak detected in ${clazz.simpleName}.${method.name}",
                                    recommendation = "Ensure clipboard data is not inadvertently shared or leaked to other components or applications.",
                                ),
                            )
                        }
                    }
                }
            }
        } catch (e: Exception) {
            issues.add(
                SecurityIssue(
                    severity = Severity.LOW,
                    description = "Unable to analyze potential clipboard data leaks: ${e.message}",
                    recommendation = "Manually review code for potential clipboard data leaks, especially when sharing data between components.",
                ),
            )
        }
        return issues
    }
}
